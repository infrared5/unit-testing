{"name":"Unit-testing","tagline":"Examples of unit testing in different languages using various libraries","body":"Introduction\r\n===\r\n> The purpose of this repository is to document examples of unit testing across multiple languages and libraries.\r\n\r\n\r\nCriteria\r\n===\r\nThe examples - across different languages and libraries - will be structured similarly so as to be easily discernable by developer's who may not be familiar but are interested in common practice for testing within a particular programming language.\r\n\r\nAs such, it is the intent of each example to demonstrate writing unit tests for the following Acceptance Criteria. The following provides User Stories, with defined criteria and scenarios to be addressed in each programming language (+library) example:\r\n\r\nUser Story: Access\r\n---\r\n<pre>\r\n<b>As an</b> administrator\r\n<b>I want to</b> access all user accounts\r\n<b>So that I</b> view each user information\r\n</pre>\r\n\r\n###Criteria\r\n\r\n* Can access all user accounts\r\n* Can access properties of each user account\r\n\r\n###Scenario: User accounts are accessible to Admin\r\n<pre>\r\n<b>Given</b> I am an administrator\r\n<b>When</b> I request all user accounts\r\n<b>Then</b> The Session model is updated with receieved User models\r\n</pre>\r\n\r\n###Scenario: User account is accessible to Admin\r\n<pre>\r\n<b>Given</b> I am an administrator\r\n<b>And</b> User accounts are available on the Session model\r\n<b>When</b> I access a User from the list\r\n<b>Then</b> I can view that User's account details\r\n</pre>\r\n\r\nUser story: Add User\r\n---\r\n<pre>\r\n<b>As an</b> administrator\r\n<b>I want to</b> add a new user\r\n<b>So that I</b> can manage the addition of accounts\r\n</pre>\r\n\r\n###Criteria\r\n\r\n* Can add a new user account if id is unique\r\n* Cannot add a new user if id is already in system\r\n\r\n\r\n###Scenario: User account with unique id added\r\n<pre>\r\n<b>Given</b> I am an administrator\r\n<b>When</b> I request to add a user\r\n<b>And</b> The user id is not available in the system\r\n<b>Then</b> The Session model is updated with the User account added\r\n</pre>\r\n\r\n###Scenario: User with non-unique id not added\r\n<pre>\r\n<b>Given</b> I am an administrator\r\n<b>When</b> I request to add a user\r\n<b>And</b> The user id is already existant in the system\r\n<b>Then</b> The Session model is unaffected\r\n</pre>\r\n\r\nSyntax & Structure\r\n===\r\nIt is preferrable to structure tests using a Behaviour-Driven-Development (BDD) methodology - at least syntax-wise. Though unit tests focused on particular output of a single method based on varying input may be required, it is recommended to setup a test to prove a scenario of a feature. Typically this means:\r\n\r\n* <b>Given</b>s are defined at the top of a test case\r\n* <b>When</b>s are descibed in set-up\r\n* <b>Then</b>s are expectations within each test\r\n\r\nThat is a loose rule from which there may be variants based on the test, but generally how tests should be structured. Following such a format allows for developers to easily read and ascertain the feature and scenarios under the test.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}